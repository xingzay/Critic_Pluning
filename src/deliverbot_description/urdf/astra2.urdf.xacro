<?xml version="1.0"?>
<robot name="sensor_astra" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="cam_px" value="0.13" />
	<!-- <xacro:property name="cam_py" value="-0.0125" /> Y varies for different configurations. get sets in sensors_urdf -->
  <xacro:property name="cam_pz" value="0.035" />
  <xacro:property name="cam_or" value="0" />
  <xacro:property name="cam_op" value="0" />
  <xacro:property name="cam_oy" value="0" />
  <xacro:property name="M_PI" value="3.14159265358979" />
  <!-- Xacro properties -->
  <xacro:property name="astra_cam_py" value="-0.0075"/>
  <xacro:property name="astra_depth_rel_rgb_py" value="0.0250" />
  <xacro:property name="astra_cam_rel_rgb_py"   value="-0.0125" />
  <xacro:property name="astra_dae_display_scale"   value="0.4" />
  <!-- Parameterised in part by the values in turtlebot_properties.urdf.xacro -->
  <xacro:macro name="sensor_astra" params="parent">
    <joint name="camera_rgb_joint" type="fixed">
      <origin xyz="${cam_px} ${astra_cam_py} ${cam_pz}"
              rpy="0 0 0"/>
      <parent link="${parent}"/>
      <child link="camera_rgb_frame" />
    </joint>
    <link name="camera_rgb_frame"/>

    <joint name="camera_rgb_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="camera_rgb_frame" />
      <child link="camera_rgb_optical_frame" />
    </joint>
    <link name="camera_rgb_optical_frame"/>

    <joint name="camera_joint" type="fixed">
      <origin xyz="0 ${astra_cam_rel_rgb_py} 0"
              rpy="0 0 0"/>
      <parent link="camera_rgb_frame"/>
      <child link="camera_link"/>
    </joint>
    <link name="camera_link">
      <visual>
        <origin xyz="-0.04 0.02 -0.01" rpy="${M_PI/2} 0 ${M_PI/2}"/>
        <geometry>
          <mesh filename="package://deliverbot_description/meshes/astra.dae" scale="${astra_dae_display_scale} ${astra_dae_display_scale} ${astra_dae_display_scale}"/>
        </geometry>
      </visual>
      <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
        <geometry>
        <box size="0.0400 0.1650 0.0300"/>
      </geometry>
      </collision>
      <inertial>
        <mass value="0.564" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.003881243" ixy="0.0" ixz="0.0"
                 iyy="0.000498940" iyz="0.0"
                 izz="0.003879257" />
      </inertial>
    </link>

    <joint name="camera_depth_joint" type="fixed">
      <origin xyz="0 ${astra_depth_rel_rgb_py} 0" rpy="0 0 0" />
      <parent link="camera_rgb_frame" />
      <child link="camera_depth_frame" />
    </joint>
    <link name="camera_depth_frame"/>

    <joint name="camera_depth_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="camera_depth_frame" />
      <child link="camera_depth_optical_frame" />
    </joint>
    <link name="camera_depth_optical_frame"/>

    <!-- RGBD sensor for simulation, same as Kinect -->
    <turtlebot_sim_3dsensor/>
    <gazebo reference="camera_link">  
      <sensor type="depth" name="sensor_astra">
        <update_rate>30</update_rate>
        <camera name="camera_astra">
          <distortion>
            <k1>0.0</k1>
            <k2>0.0</k2>
            <k3>0.0</k3>
            <p1>0.0</p1>
            <p2>0.0</p2>
            <center>0.5 0.5</center>
          </distortion>
        </camera>
        <plugin name="plugin_name" filename="libgazebo_ros_camera.so">
          <!-- Change namespace, camera name and topics so -
               * Raw images are published to: /custom_ns/custom_camera/custom_image
               * Depth images are published to: /custom_ns/custom_camera/custom_image_depth
               * Raw image camera info is published to: /custom_ns/custom_camera/custom_info_raw
               * Depth image camera info is published to: /custom_ns/custom_camera/custom_info_depth
               * Point cloud is published to: /custom_ns/custom_camera/custom_points
          -->
          <ros>
            <namespace>astra</namespace>
            <!-- <remapping>custom_camera/image_raw:=custom_camera/custom_image</remapping>
            <remapping>custom_camera/image_depth:=custom_camera/custom_image_depth</remapping>
            <remapping>custom_camera/camera_info:=custom_camera/custom_info_raw</remapping>
            <remapping>custom_camera/camera_info_depth:=custom_camera/custom_info_depth</remapping>
            <remapping>custom_camera/points:=custom_camera/custom_points</remapping> -->
          </ros>

          <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
          <camera_name>sensor_astra</camera_name>

          <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
          <frame_name>custom_frame</frame_name>

          <hack_baseline>0.07</hack_baseline>

          <!-- No need to repeat distortion parameters or to set autoDistortion -->

           <min_depth>0.001</min_depth>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>
</robot>
